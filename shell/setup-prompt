# should be sourced by bash
# prompt tweaks

source colors.sh

# TODO: do everything within one function that prints PS1, to keep namespace clean.

pcolor() {
    # Same as color(), but adds \[ and \] to make the color setting prompt-transparent.
    # Without arguments, prints nothing at all.
    [ -n "$1" ] && echo -n '\['$(color $*)'\]'
}

p_exitcode() {
    # dynamically sets background color depending on $?
    local nonzero_bg='red'
    local fg=$(hl_color 'white' 'gray') # optional foreground color
    #
    # ? local zattr="$(pcolor $fg on $zero_bg)"
    local nonzattr="$(pcolor $fg on $nonzero_bg)"
    local nextattr="$(pcolor $next_bg)"
    local nextbgattr="$(pcolor on $next_bg)"
    echo -n '$(N=$?;[ $N -ne 0 ] && echo -n "'${nonzattr}'$N ")'
}

p_time() {
    local bg='green'
    local fg='black' # optional foreground color
    echo "$(pcolor $fg on $bg)"'$(date +%H:%M)'
}

p_host() {
    local normal_fg='gray'       # default host name color
    local special_fg=$(hl_color 148 'cyan')
    local bg=$(hl_color 22 'blue') # background
    #
    local fg
    local underline=''
    local underline_off_code=''
    host_part=$(hostname)
    if [[ ${host_part} =~ corp\.google\.com ]]; then
        fg=${special_fg}
    else
        fg=${normal_fg}
    fi
    if [ -n "$SSH_CLIENT" ]; then
        underline='underline'
        underline_off_code="$(pcolor no_underline)"
    fi
    printf "$(pcolor $fg on $bg $underline) ${host_part}${underline_off_code}"
}

p_pwd_git() {
    # Lets show current directory.
    # If under git, shows repo's base dir, current branch, and commit status
    local bg=$(hl_color 22 blue)
    local plain_fg=$(hl_color 82 cyan)
    local repo_fg="bold $(hl_color 253 gray)"
    local clean_fg="none $(hl_color lt_green black) on $(hl_color 22 green)"
    local modified_fg="none $(hl_color 220 black) on $(hl_color 58 brown)"
    # more to come
    local plain_attrs="$(pcolor ${plain_fg} on ${bg})"
    local git_tree_attrs="$(pcolor ${repo_fg})"
    printf '$(show_git_pwd "'${plain_attrs}'" "'${git_tree_attrs}'" "'
    printf $(pcolor ${clean_fg})'" "'$(pcolor ${modified_fg})'")'
}

show_git_pwd() {
    local nongit_attrs=$1
    shift
    local git_attrs=$1
    shift
    local clean_branch_attrs=${1:-${nongit_attrs}}
    shift
    local modified_branch_attrs=${1:-${git_attrs}}
    # 
    local git_prefix=$(git rev-parse --show-prefix 2> /dev/null)
    if [ -n "${git_prefix}" ]; then
        # dirs
        local pwd_slash="${PWD}/"
        local git_base=${pwd_slash%${git_prefix}}
        local non_git_prefix=$(dirname "$git_base")"/"
        local worktree_path=${PWD#${non_git_prefix}}
        # branch + status
        local branch=$(git describe --contains --all HEAD)
        local branch_attrs=$(git diff --no-ext-diff --quiet --exit-code \
            && printf "${clean_branch_attrs}" || printf "${modified_branch_attrs}")
        # final output
        printf "${nongit_attrs}${non_git_prefix}${git_attrs}${worktree_path}"
        printf "${branch_attrs} @ ${branch}"
    else
        # git did not work. show a regular path
        printf "${nongit_attrs}${PWD}"
    fi    
}

prompt_colors()
# sets C_ACCESS, C_SUPER, C_TITLE, C_NOCOLOR to esc sequences if xterm
# else sets them to empty values
{
if [ $(tput colors) -ge 8 ]; then
   C_ACCESS="\[\033[1;37m\]" # white by default
   C_NOCOLOR="\[\033[0m\]"
   if [ -n "$SSH_CLIENT" ]; then
     C_ACCESS="\[\033[1;32m\]" # green is SSH
   else
     C_ACCESS="\[\033[0;37m\]" # gray is non-ssh
   fi
   if [ "$(id -u)" = "0" ]; then
     C_USER="\[\033[1;31m\]" # red is root
   else
     C_USER="\[\033[1;32m\]" # green is non-root
   fi
   git_branch_cmd='$(git branch 2>/dev/null|grep -e ^* | tr -d "\* ")'
   if [ "$TMUX" ]; then
       C_TITLE='\[\e]0;\w |'${git_branch_cmd}'\a\]'
   else
       C_TITLE='\[\e]0;\u@\H:\w |'${git_branch_cmd}'\a\]'
   fi
   if [ $TERM == 'linux' ] || [ $TERM == 'cons25' ]; then 
       # consoles don't support title
       C_TITLE=""
   fi
   #export PS1="$NOCOLOR\u@$HOST_PRE\h$NOCOLOR:\W$PRE\\$ $NOCOLOR"
   #export PS2="${PRE}> $NOCOLOR"
else
  # TODO: support 4-color withbold, too
   C_NOCOLOR=""
   C_ACCESS=""
   C_USER=""
   C_TITLE=""
fi
}

host_part=$(hostname | head -c 7)
time_part='$(date +"%H:%M")'
prompt_colors

# example: 
PS1="$(pcolor none)$(p_exitcode)$(p_time) $(p_host):$(p_pwd_git) $(pcolor none)\n\$ "

unset host_part time_part

